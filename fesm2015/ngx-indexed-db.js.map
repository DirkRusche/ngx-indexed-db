{"version":3,"file":"ngx-indexed-db.js","sources":["ng://ngx-indexed-db/lib/ngx-indexed-db.ts","ng://ngx-indexed-db/utils/index.ts","ng://ngx-indexed-db/lib/ngx-indexed-db.meta.ts","ng://ngx-indexed-db/lib/ngx-indexed-db.service.ts","ng://ngx-indexed-db/lib/ngxindexeddb.module.ts"],"sourcesContent":["export interface ObjectStoreMeta {\n\tstore: string;\n\tstoreConfig: { keyPath: string; autoIncrement: boolean; [key: string]: any };\n\tstoreSchema: ObjectStoreSchema[];\n}\n\nexport interface ObjectStoreSchema {\n\tname: string;\n\tkeypath: string | string[];\n\toptions: { unique: boolean; [key: string]: any };\n}\nexport type Key = string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange;\nexport interface IndexDetails {\n\tindexName: string;\n\torder: string;\n}\nexport interface RequestEventTarget<T> extends EventTarget {\n\tresult: T | T[];\n}\n\nexport interface RequestEvent<T> extends Event {\n\ttarget: RequestEventTarget<T>;\n}\n\nexport function openDatabase(indexedDB: IDBFactory, dbName: string, version: number, upgradeCallback?: Function) {\n\treturn new Promise<IDBDatabase>((resolve, reject) => {\n\t\tif (!indexedDB) {\n\t\t\treject('IndexedDB not available');\n\t\t}\n\t\tconst request = indexedDB.open(dbName, version);\n\t\tlet db: IDBDatabase;\n\t\trequest.onsuccess = (event: Event) => {\n\t\t\tdb = request.result;\n\t\t\tresolve(db);\n\t\t};\n\t\trequest.onerror = (event: Event) => {\n\t\t\treject(`IndexedDB error: ${request.error}`);\n\t\t};\n\t\tif (typeof upgradeCallback === 'function') {\n\t\t\trequest.onupgradeneeded = (event: Event) => {\n\t\t\t\tupgradeCallback(event, db);\n\t\t\t};\n\t\t}\n\t});\n}\n\nexport function CreateObjectStore(\n\tindexedDB: IDBFactory,\n\tdbName: string,\n\tversion: number,\n\tstoreSchemas: ObjectStoreMeta[],\n\tmigrationFactory?: () => { [key: number]: (db: IDBDatabase, transaction: IDBTransaction) => void }\n) {\n\tif (!indexedDB) {\n\t\treturn;\n\t}\n\tconst request: IDBOpenDBRequest = indexedDB.open(dbName, version);\n\n\trequest.onupgradeneeded = function(event: IDBVersionChangeEvent) {\n\t\tconst database: IDBDatabase = (event.target as any).result;\n\n\t\tstoreSchemas.forEach((storeSchema: ObjectStoreMeta) => {\n\t\t\tif (!database.objectStoreNames.contains(storeSchema.store)) {\n\t\t\t\tconst objectStore = database.createObjectStore(storeSchema.store, storeSchema.storeConfig);\n\t\t\t\tstoreSchema.storeSchema.forEach((schema: ObjectStoreSchema) => {\n\t\t\t\t\tobjectStore.createIndex(schema.name, schema.keypath, schema.options);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tconst storeMigrations = migrationFactory && migrationFactory();\n\t\tif (storeMigrations) {\n\t\t\tObject.keys(storeMigrations)\n\t\t\t\t.map(k => parseInt(k, 10))\n\t\t\t\t.filter(v => v > event.oldVersion)\n\t\t\t\t.sort((a, b) => a - b)\n\t\t\t\t.forEach(v => {\n\t\t\t\t\tstoreMigrations[v](database, request.transaction);\n\t\t\t\t});\n\t\t}\n\n\t\tdatabase.close();\n\t};\n\n\trequest.onsuccess = function(e: any) {\n\t\te.target.result.close();\n\t};\n}\n\nexport enum DBMode {\n\treadonly = 'readonly',\n\treadwrite = 'readwrite'\n}\n","export interface Options {\n\tstoreName: string;\n\tdbMode: IDBTransactionMode;\n\terror: (e: Event) => any;\n\tcomplete: (e: Event) => any;\n\tabort?: any;\n}\n\nexport function validateStoreName(db: IDBDatabase, storeName: string) {\n\treturn db.objectStoreNames.contains(storeName);\n}\n\nexport function validateBeforeTransaction(db: IDBDatabase, storeName: string, reject: Function) {\n\tif (!db) {\n\t\treject('You need to use the openDatabase function to create a database before you query it!');\n\t}\n\tif (!validateStoreName(db, storeName)) {\n\t\treject(`objectStore does not exists: ${storeName}`);\n\t}\n}\n\nexport function createTransaction(db: IDBDatabase, options: Options): IDBTransaction {\n\tlet trans: IDBTransaction = db.transaction(options.storeName, options.dbMode);\n\ttrans.onerror = options.error;\n\ttrans.oncomplete = options.complete;\n\ttrans.onabort = options.abort;\n\treturn trans;\n}\n\nexport function optionsGenerator(type: any, storeName: any, reject: Function, resolve: Function): Options {\n\treturn {\n\t\tstoreName: storeName,\n\t\tdbMode: type,\n\t\terror: (e: Event) => {\n\t\t\treject(e);\n\t\t},\n\t\tcomplete: (e: Event) => {\n\t\t\tresolve();\n\t\t},\n\t\tabort: (e: Event) => {\n\t\t\treject(e);\n\t\t}\n\t};\n}\n","import { InjectionToken } from '@angular/core';\n\nexport interface DBConfig {\n\tname: string;\n\tversion: number;\n\tobjectStoresMeta: ObjectStoreMeta[];\n\tmigrationFactory?: () => { [key: number]: (db: IDBDatabase, transaction: IDBTransaction) => void };\n}\n\nexport interface ObjectStoreMeta {\n\tstore: string;\n\tstoreConfig: { keyPath: string; autoIncrement: boolean; [key: string]: any };\n\tstoreSchema: ObjectStoreSchema[];\n}\n\nexport interface ObjectStoreSchema {\n\tname: string;\n\tkeypath: string;\n\toptions: { unique: boolean; [key: string]: any };\n}\n\nexport const CONFIG_TOKEN = new InjectionToken<DBConfig>(null);\n","import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport { openDatabase, DBMode, Key, RequestEvent, CreateObjectStore, ObjectStoreMeta } from './ngx-indexed-db';\nimport { createTransaction, optionsGenerator, validateBeforeTransaction } from '../utils';\nimport { CONFIG_TOKEN, DBConfig } from './ngx-indexed-db.meta';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Injectable()\nexport class NgxIndexedDBService {\n\tprivate readonly isBrowser: boolean;\n\tindexedDB;\n\n\tconstructor(@Inject(CONFIG_TOKEN) private dbConfig: DBConfig, @Inject(PLATFORM_ID) private platformId: any) {\n\t\tif (!dbConfig.name) {\n\t\t\tthrow new Error('NgxIndexedDB: Please, provide the dbName in the configuration');\n\t\t}\n\t\tif (!dbConfig.version) {\n\t\t\tthrow new Error('NgxIndexedDB: Please, provide the db version in the configuration');\n\t\t}\n\t\tthis.isBrowser = isPlatformBrowser(platformId);\n\t\tif (this.isBrowser) {\n\t\t\tthis.indexedDB =\n\t\t\t\twindow.indexedDB ||\n\t\t\t\t(<any>window).mozIndexedDB ||\n\t\t\t\t(<any>window).webkitIndexedDB ||\n\t\t\t\t(<any>window).msIndexedDB;\n\t\t\tCreateObjectStore(\n\t\t\t\tthis.indexedDB,\n\t\t\t\tdbConfig.name,\n\t\t\t\tdbConfig.version,\n\t\t\t\tdbConfig.objectStoresMeta,\n\t\t\t\tdbConfig.migrationFactory\n\t\t\t);\n\t\t}\n\t}\n\n\tcreateObjectStore(\n\t\tstoreSchema: ObjectStoreMeta,\n\t\tmigrationFactory?: () => { [key: number]: (db: IDBDatabase, transaction: IDBTransaction) => void }\n\t) {\n\t\tlet storeSchemas: ObjectStoreMeta[] = [storeSchema];\n\t\tCreateObjectStore(this.indexedDB, this.dbConfig.name, this.dbConfig.version, storeSchemas, migrationFactory);\n\t}\n\n\tadd<T>(storeName: string, value: T, key?: any) {\n\t\treturn new Promise<number>((resolve, reject) => {\n\t\t\topenDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then((db: IDBDatabase) => {\n\t\t\t\tlet transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, storeName, reject, resolve)),\n\t\t\t\t\tobjectStore = transaction.objectStore(storeName);\n\n\t\t\t\tlet request: IDBRequest;\n\t\t\t\tif (key) {\n\t\t\t\t\trequest = objectStore.add(value, key);\n\t\t\t\t} else {\n\t\t\t\t\trequest = objectStore.add(value);\n\t\t\t\t}\n\n\t\t\t\trequest.onsuccess = (evt: any) => {\n\t\t\t\t\tkey = evt.target.result;\n\t\t\t\t\tresolve(key);\n\t\t\t\t};\n\t\t\t}).catch(reason => reject(reason));\n\t\t});\n\t}\n\n\tgetByKey<T>(storeName: string, key: any) {\n\t\treturn new Promise<any>((resolve, reject) => {\n\t\t\topenDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then((db: IDBDatabase) => {\n\t\t\t\tlet transaction = createTransaction(db, optionsGenerator(DBMode.readonly, storeName, reject, resolve)),\n\t\t\t\t\tobjectStore = transaction.objectStore(storeName);\n\t\t\t\tlet request = objectStore.get(key);\n\t\t\t\trequest.onsuccess = function(event: Event) {\n\t\t\t\t\tresolve((<any>event.target).result);\n\t\t\t\t};\n\t\t\t\trequest.onerror = function(event: Event) {\n\t\t\t\t\treject(event);\n\t\t\t\t};\n\t\t\t}).catch(reason => reject(reason));\n\t\t});\n\t}\n\n\tgetByID<T>(storeName: string, id: string | number) {\n\t\treturn new Promise<T>((resolve, reject) => {\n\t\t\topenDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then((db: IDBDatabase) => {\n\t\t\t\tvalidateBeforeTransaction(db, storeName, reject);\n\t\t\t\tlet transaction = createTransaction(db, optionsGenerator(DBMode.readonly, storeName, reject, resolve)),\n\t\t\t\t\tobjectStore = transaction.objectStore(storeName),\n\t\t\t\t\trequest: IDBRequest;\n\t\t\t\trequest = objectStore.get(id);\n\t\t\t\trequest.onsuccess = function(event: Event) {\n\t\t\t\t\tresolve((event.target as any).result as T);\n\t\t\t\t};\n\t\t\t}).catch(reason => reject(reason));\n\t\t});\n\t}\n\n\tgetAll<T>(storeName: string) {\n\t\treturn new Promise<T[]>((resolve, reject) => {\n\t\t\topenDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n\t\t\t\tvalidateBeforeTransaction(db, storeName, reject);\n\t\t\t\tlet transaction = createTransaction(db, optionsGenerator(DBMode.readonly, storeName, reject, resolve)),\n\t\t\t\t\tobjectStore = transaction.objectStore(storeName),\n\t\t\t\t\tresult: Array<any> = [];\n\n\t\t\t\tconst request: IDBRequest = objectStore.getAll();\n\n\t\t\t\trequest.onerror = function(e) {\n\t\t\t\t\treject(e);\n\t\t\t\t};\n\t\t\t\trequest.onsuccess = function({ target: { result: ResultAll } }: RequestEvent<T>) {\n\t\t\t\t\tresolve(ResultAll as T[]);\n\t\t\t\t};\n\t\t\t}).catch(reason => reject(reason));\n\t\t});\n\t}\n\n\tupdate<T>(storeName: string, value: T, key?: any) {\n\t\treturn new Promise<any>((resolve, reject) => {\n\t\t\topenDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n\t\t\t\tvalidateBeforeTransaction(db, storeName, reject);\n\t\t\t\tlet transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, storeName, reject, resolve)),\n\t\t\t\t\tobjectStore = transaction.objectStore(storeName);\n\t\t\t\ttransaction.oncomplete = event => {\n\t\t\t\t\tresolve(event);\n\t\t\t\t};\n\t\t\t\tif (key) {\n\t\t\t\t\tobjectStore.put(value, key);\n\t\t\t\t} else {\n\t\t\t\t\tobjectStore.put(value);\n\t\t\t\t}\n\t\t\t}).catch(reason => reject(reason));\n\t\t});\n\t}\n\n\tdeleteRecord(storeName: string, key: Key) {\n\t\treturn new Promise<any>((resolve, reject) => {\n\t\t\topenDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n\t\t\t\tvalidateBeforeTransaction(db, storeName, reject);\n\t\t\t\tlet transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, storeName, reject, resolve)),\n\t\t\t\t\tobjectStore = transaction.objectStore(storeName);\n\t\t\t\tlet request = objectStore.delete(key);\n\t\t\t\trequest.onsuccess = event => {\n\t\t\t\t\tresolve(event);\n\t\t\t\t};\n\t\t\t}).catch(reason => reject(reason));\n\t\t});\n\t}\n\n\tclear(storeName: string) {\n\t\treturn new Promise<any>((resolve, reject) => {\n\t\t\topenDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n\t\t\t\tvalidateBeforeTransaction(db, storeName, reject);\n\t\t\t\tlet transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, storeName, reject, resolve)),\n\t\t\t\t\tobjectStore = transaction.objectStore(storeName);\n\t\t\t\tobjectStore.clear();\n\t\t\t\ttransaction.oncomplete = event => {\n\t\t\t\t\tresolve();\n\t\t\t\t};\n\t\t\t}).catch(reason => reject(reason));\n\t\t});\n\t}\n\n\tdelete(storeName: string, key: any) {\n\t\treturn new Promise<any>((resolve, reject) => {\n\t\t\topenDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n\t\t\t\tvalidateBeforeTransaction(db, storeName, reject);\n\t\t\t\tlet transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, storeName, reject, resolve)),\n\t\t\t\t\tobjectStore = transaction.objectStore(storeName);\n\t\t\t\tobjectStore['delete'](key);\n\t\t\t}).catch(reason => reject(reason));\n\t\t});\n\t}\n\n\tdeleteDatabase() {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tconst db = await openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version);\n\t\t\t\tawait db.close();\n\t\t\t\tconst deleteDBRequest = this.indexedDB.deleteDatabase(this.dbConfig.name);\n\t\t\t\tdeleteDBRequest.onsuccess = resolve;\n\t\t\t\tdeleteDBRequest.onerror = reject;\n\t\t\t\tdeleteDBRequest.onblocked = () => {\n\t\t\t\t\tthrow new Error(\"Unable to delete database because it's blocked\");\n\t\t\t\t};\n\t\t\t} catch (e) {\n\t\t\t\treject(e);\n\t\t\t}\n\t\t});\n\t}\n\n\topenCursor(storeName: string, cursorCallback: (event: Event) => void, keyRange?: IDBKeyRange) {\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\topenDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n\t\t\t\tvalidateBeforeTransaction(db, storeName, reject);\n\t\t\t\tlet transaction = createTransaction(db, optionsGenerator(DBMode.readonly, storeName, reject, resolve)),\n\t\t\t\t\tobjectStore = transaction.objectStore(storeName),\n\t\t\t\t\trequest = keyRange === undefined ? objectStore.openCursor() : objectStore.openCursor(keyRange);\n\n\t\t\t\trequest.onsuccess = (event: Event) => {\n\t\t\t\t\tcursorCallback(event);\n\t\t\t\t\tresolve();\n\t\t\t\t};\n\t\t\t}).catch(reason => reject(reason));\n\t\t});\n\t}\n\n\t/**\n\t * Open a cursor by index filter.\n\t * @param storeName The name of the store to query.\n\t * @param indexName The index name to filter.\n\t * @param keyRange The range value and criteria to apply on the index.\n\t * @param cursorCallback A callback called when done.\n\t */\n\topenCursorByIndex(\n\t\tstoreName: string,\n\t\tindexName: string,\n\t\tkeyRange: IDBKeyRange,\n\t\tcursorCallback: (event: Event) => void\n\t) {\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\topenDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n\t\t\t\tvalidateBeforeTransaction(db, storeName, reject);\n\t\t\t\tlet transaction = createTransaction(db, optionsGenerator(DBMode.readonly, storeName, reject, resolve)),\n\t\t\t\t\tobjectStore = transaction.objectStore(storeName),\n\t\t\t\t\tindex = objectStore.index(indexName),\n\t\t\t\t\trequest = index.openCursor(keyRange);\n\n\t\t\t\trequest.onsuccess = (event: Event) => {\n\t\t\t\t\tcursorCallback(event);\n\t\t\t\t\tresolve();\n\t\t\t\t};\n\t\t\t}).catch(reason => reject(reason));\n\t\t});\n\t}\n\n\t/**\n\t * Returns all items by an index.\n\t * @param storeName The name of the store to query\n\t * @param indexName The index name to filter\n\t * @param keyRange  The range value and criteria to apply on the index.\n\t */\n\tgetAllByIndex<T>(storeName: string, indexName: string, keyRange: IDBKeyRange): Promise<T[]> {\n\t\tconst data: T[] = [];\n\t\treturn new Promise<T[]>((resolve, reject) => {\n\t\t\tthis.openCursorByIndex(storeName, indexName, keyRange, event => {\n\t\t\t\tconst cursor: IDBCursorWithValue = (event.target as IDBRequest<IDBCursorWithValue>).result;\n\t\t\t\tif (cursor) {\n\t\t\t\t\tdata.push(cursor.value);\n\t\t\t\t\tcursor.continue();\n\t\t\t\t} else {\n\t\t\t\t\tresolve(data);\n\t\t\t\t}\n\t\t\t}).catch(reason => reject(reason));\n\t\t});\n\t}\n\n\tgetByIndex(storeName: string, indexName: string, key: any) {\n\t\treturn new Promise<any>((resolve, reject) => {\n\t\t\topenDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n\t\t\t\tvalidateBeforeTransaction(db, storeName, reject);\n\t\t\t\tlet transaction = createTransaction(db, optionsGenerator(DBMode.readonly, storeName, reject, resolve)),\n\t\t\t\t\tobjectStore = transaction.objectStore(storeName),\n\t\t\t\t\tindex = objectStore.index(indexName),\n\t\t\t\t\trequest = index.get(key);\n\t\t\t\trequest.onsuccess = (event: Event) => {\n\t\t\t\t\tresolve((<IDBOpenDBRequest>event.target).result);\n\t\t\t\t};\n\t\t\t}).catch(reason => reject(reason));\n\t\t});\n\t}\n\n\tcount(storeName: string, keyRange?: IDBValidKey | IDBKeyRange) {\n\t\treturn new Promise<any>((resolve, reject) => {\n\t\t\topenDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n\t\t\t\tvalidateBeforeTransaction(db, storeName, reject);\n\t\t\t\tlet transaction = createTransaction(db, optionsGenerator(DBMode.readonly, storeName, reject, resolve)),\n\t\t\t\t\tobjectStore = transaction.objectStore(storeName),\n\t\t\t\t\trequest: IDBRequest;\n\n\t\t\t\trequest = objectStore.count(keyRange);\n\t\t\t\trequest.onerror = e => reject(e);\n\t\t\t\trequest.onsuccess = e => resolve((<any>e.target).result);\n\t\t\t}).catch(reason => reject(reason));\n\t\t});\n\t}\n}\n","import { NgModule, ModuleWithProviders, InjectionToken } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgxIndexedDBService } from './ngx-indexed-db.service';\nimport { DBConfig, CONFIG_TOKEN } from './ngx-indexed-db.meta';\n\n@NgModule({\n\tdeclarations: [],\n\timports: [CommonModule]\n})\nexport class NgxIndexedDBModule {\n\tstatic forRoot(dbConfig: DBConfig): ModuleWithProviders<NgxIndexedDBModule> {\n\t\treturn {\n\t\t\tngModule: NgxIndexedDBModule,\n\t\t\tproviders: [NgxIndexedDBService, { provide: CONFIG_TOKEN, useValue: dbConfig }]\n\t\t};\n\t}\n}\n"],"names":["ObjectStoreMeta","ObjectStoreSchema"],"mappings":"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"}